generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum RoleTeamMember {
    leader
    member
}

enum RoleUser {
    participant
    admin
    operator
}

enum Round {
    preliminary
    final
}

enum StatusProposal {
    approve
    pending
    rejected
}

enum StatusSubmission {
    pending
    passed
    failed
}

enum FileUsage {
    proposal
    submission
    ktm
}

model User {
    id         String      @id @default(cuid())
    email      String      @unique @db.VarChar(125)
    password   String      @db.VarChar(255)
    name       String      @db.VarChar(255)
    verified   Boolean     @default(false)
    role       RoleUser    @default(participant)
    createdAt  DateTime    @default(now())
    Assesment  Assesment[]
    TeamMember TeamMember?
    UserToken  UserToken[]

    @@index([email])
}

model UserToken {
    id        Int      @id @default(autoincrement())
    token     String   @unique
    userId    String
    expiresAt DateTime
    createdAt DateTime @default(now())
    User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([expiresAt])
}

model Lecture {
    id        Int      @id @default(autoincrement())
    name      String
    nip       String   @db.VarChar(18)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Team      Team[]
}

model Category {
    id            Int      @id @default(autoincrement())
    categoriName  String   @db.VarChar(100)
    description   String?
    deadline      DateTime
    driveFolderId String?
    createdAt     DateTime @default(now())
    Team          Team[]
}

model Team {
    id                 Int          @id @default(autoincrement())
    name               String       @db.VarChar(125)
    categoryId         Int
    institution        String
    lectureId          Int
    verified           Boolean      @default(false)
    ktmFolderId        String?
    submissionFolderId String?
    createdAt          DateTime     @default(now())
    updatedAt          DateTime     @default(now())
    Proposal           Proposal[]
    Submission         Submission[]
    Category           Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    Lecture            Lecture      @relation(fields: [lectureId], references: [id], onDelete: Cascade)
    TeamMember         TeamMember[]

    @@index([categoryId])
    @@index([lectureId])
    @@index([verified])
}

model TeamMember {
    id        Int            @id @default(autoincrement())
    teamId    Int
    userId    String?        @unique
    role      RoleTeamMember
    nim       String         @db.VarChar(12)
    name      String
    email     String
    noWa      String
    prodi     String
    fileKtmId String?
    createdAt DateTime       @default(now())
    Team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
    User      User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
    fileKtm   File?          @relation("KtmFile", fields: [fileKtmId], references: [id], onDelete: Cascade)

    @@index([teamId])
    @@index([userId])
    @@index([fileKtmId])
    @@index([role])
}

model Proposal {
    id        Int            @id @default(autoincrement())
    title     String         @db.VarChar(125)
    teamId    Int
    fileId    String?        @unique
    status    StatusProposal @default(pending)
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    comments  String?
    assesment Assesment?
    File      File?          @relation("ProposalFile", fields: [fileId], references: [id], onDelete: Cascade)
    Team      Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@index([teamId])
    @@index([fileId])
    @@index([status])
}

model Submission {
    id          Int              @id @default(autoincrement())
    teamId      Int
    round       Round
    title       String?
    description String?
    githubUrl   String?
    fileUrl     String?
    fileName    String?
    status      StatusSubmission @default(pending)
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @default(now()) @updatedAt
    Team        Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

    @@index([teamId])
    @@index([round])
    @@index([status])
}

model Assesment {
    id         Int      @id @default(autoincrement())
    proposalId Int      @unique
    juriId     String
    score      Float
    createdAt  DateTime @default(now())
    User       User     @relation(fields: [juriId], references: [id], onDelete: Cascade)
    Proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

    @@index([proposalId])
    @@index([juriId])
}

model File {
    id           String       @id
    originalName String
    fileName     String
    fileSize     Int
    type         String
    path         String
    usage        FileUsage
    createdAt    DateTime     @default(now())
    Proposal     Proposal[]   @relation("ProposalFile")
    TeamMembers  TeamMember[] @relation("KtmFile")

    @@index([usage])
    @@index([createdAt])
}

model Timeline {
    id          Int       @id @default(autoincrement())
    title       String
    description String    @db.Text
    startTime   DateTime
    endTime     DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([startTime])
    @@index([endTime])
}
